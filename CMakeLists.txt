cmake_minimum_required (VERSION 3.0)

project(nanofun)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -Wextra -Wno-missing-braces")


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++17")


#Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

#Add the configurations from nanogui
add_subdirectory(nanogui)# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

#Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})



add_executable(index main.cpp)

#add_link_options("-o index.html")
message(STATUS ${NANOGUI_EXTRA_LIBS} )
message(${NANOGUI_EXTRA_LIBS} STATUS)
SET(CMAKE_EXECUTABLE_SUFFIX ".html")


set_target_properties(index PROPERTIES LINK_FLAGS "-o index.html  -s DISABLE_EXCEPTION_CATCHING=0")

target_link_libraries(index nanogui ${NANOGUI_EXTRA_LIBS})
